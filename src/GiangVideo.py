from moviepy.editor import (
    VideoFileClip,
    concatenate_videoclips,
    AudioFileClip,
    CompositeAudioClip,
)
import os
import moviepy.video.fx.all as vfx

# T·∫£i video t·ª´ YouTube
# def download_youtube_video(url, output_path='downloads'):
#     yt = YouTube(url)
#     stream = yt.streams.filter(file_extension='mp4', progressive=True).order_by('resolution').desc().first()
#     if not os.path.exists(output_path):
#         os.makedirs(output_path)
#     file_path = stream.download(output_path=output_path)
#     return file_path


def cut_video(input_path, start_time, end_time):
    video = VideoFileClip(input_path)
    return video.subclip(start_time, end_time)


def merge_videos(clips, resolution=(720, 1280), fps=30):
    standardized_clips = [standardize_clip(c, resolution, fps) for c in clips]
    final_clip = concatenate_videoclips(standardized_clips, method="compose")
    return final_clip


def standardize_clip(clip, target_resolution=(720, 1280), target_fps=30):
    return clip.resize(target_resolution).set_fps(target_fps)


def save_clip(clip, output_path="output.mp4"):
    clip.write_videofile(output_path, threads=4, codec="libx264", audio_codec="aac")
    clip.close()


def get_video_info(clip):
    info = {
        "resolution": clip.size,
        "fps": clip.fps,
        "duration": clip.duration,
        "has_audio": clip.audio is not None,
    }
    return info


def insert_audio_clip(video, audio_path, insert_time):
    video_duration = video.duration

    try:
        audio = AudioFileClip(audio_path)
    except:
        audio_video = VideoFileClip(audio_path)
        if not audio_video.audio:
            raise ValueError("File video ch√®n kh√¥ng c√≥ √¢m thanh.")
        audio = audio_video.audio

    total_needed_duration = audio.duration + insert_time

    if total_needed_duration > video_duration:
        video = repeat_video_tail(video, total_needed_duration, 3)
    elif total_needed_duration < video_duration:
        video = video.subclip(0, total_needed_duration)

    new_audio = combine_audio_clips(video, audio)
    return video.set_audio(new_audio)


def repeat_video_tail(video_clip, duration, loop_duration):
    """
    Extends a video clip to a specified duration by repeating its tail segment.
    Parameters:
        video_clip (VideoFileClip): ƒêo·∫°n video g·ªëc c·∫ßn x·ª≠ l√Ω.
        duration (float): ƒê·ªô d√†i (t√≠nh b·∫±ng gi√¢y) mong mu·ªën c·ªßa video ƒë·∫ßu ra.
        loop_duration (float): ƒê·ªô d√†i (t√≠nh b·∫±ng gi√¢y) c·ªßa ƒëo·∫°n cu·ªëi video s·∫Ω ƒë∆∞·ª£c l·∫∑p l·∫°i.
    Returns:
        VideoFileClip: ƒêo·∫°n video m·ªõi c√≥ ƒë·ªô d√†i ƒë√∫ng b·∫±ng `duration`, v·ªõi ph·∫ßn cu·ªëi ƒë∆∞·ª£c l·∫∑p l·∫°i n·∫øu c·∫ßn thi·∫øt.
    """
    current_duration = video_clip.duration
    if current_duration >= duration:
        return video_clip.subclip(0, duration)
    tail_duration = min(loop_duration, current_duration)
    tail = video_clip.subclip(current_duration - tail_duration, current_duration)
    remaining_duration = duration - current_duration
    repeat_count = int(remaining_duration / tail_duration) + 1
    tail_loop = [tail] * repeat_count
    looped_tail = concatenate_videoclips(tail_loop)
    final_clip = concatenate_videoclips([video_clip, looped_tail])
    return final_clip.subclip(0, duration)


def combine_audio_clips(video, audio):
    base_audio = video.audio if video.audio else None
    new_audio = CompositeAudioClip([base_audio, audio] if base_audio else [audio])

    return new_audio


def merge_videos_with_audio_and_outro(
    video_folder, audio_folder, outro_folder, output_folder
):
    os.makedirs(output_folder, exist_ok=True)

    video_files = [f for f in os.listdir(video_folder) if f.endswith(".mp4")]
    audio_files = [f for f in os.listdir(audio_folder) if f.endswith((".mp3", ".mp4"))]
    outro_files = [f for f in os.listdir(outro_folder) if f.endswith(".mp4")]

    print("üìÇ Danh s√°ch video:", video_files)
    print("üéµ Danh s√°ch audio:", audio_files)
    print("üì∫ Danh s√°ch outro:", outro_files)

    for video_file in video_files:
        video_path = os.path.join(video_folder, video_file)

        # L·∫•y th√¥ng tin ƒë·ªãnh d·∫°ng g·ªëc t·ª´ video ƒë·∫ßu ti√™n
        ref_clip = VideoFileClip(video_path)
        resolution = ref_clip.size
        fps = ref_clip.fps
        ref_clip.close()

        for audio_file in audio_files:
            audio_path = os.path.join(audio_folder, audio_file)

            for outro_file in outro_files:
                outro_path = os.path.join(outro_folder, outro_file)

                try:
                    print("Chu·∫©n h√≥a video ch√≠nh v√† outro")
                    main_clip = standardize_clip(
                        VideoFileClip(video_path), resolution, fps
                    )
                    outro_clip = standardize_clip(
                        VideoFileClip(outro_path), resolution, fps
                    )
                    main_clip = main_clip.without_audio()
                    outro_clip = outro_clip.set_audio(outro_clip.audio.volumex(0.3))

                    print("Gh√©p video ch√≠nh + outro")
                    merged_video = merge_videos(
                        [main_clip, outro_clip], resolution, fps
                    )

                    print("Sau khi c√≥ merged full video, m·ªõi thay th·∫ø audio")
                    video_with_audio = insert_audio_clip(
                        merged_video, audio_path, insert_time=0
                    )

                    print("T√™n file xu·∫•t ra")
                    name = f"{os.path.splitext(video_file)[0]}_{os.path.splitext(audio_file)[0]}_{os.path.splitext(outro_file)[0]}"
                    output_path = os.path.join(output_folder, f"{name}.mp4")

                    save_clip(video_with_audio, output_path)
                    print(f"‚úÖ ƒê√£ xu·∫•t: {output_path}")
                except Exception as e:
                    print(f"‚ùå L·ªói v·ªõi {video_file} + {audio_file} + {outro_file}: {e}")


def insert_audio_clip_mix(
    video,
    audio_path,
    audio_insert_time,
    video_tail_duration,
    video_audio_gain=1.0,
    audio_insert_volume=1.0,
):
    """
    Ch√®n m·ªôt ƒëo·∫°n audio v√†o video t·∫°i th·ªùi ƒëi·ªÉm ch·ªâ ƒë·ªãnh, tr·ªôn v·ªõi √¢m thanh g·ªëc c·ªßa video v√† ƒëi·ªÅu ch·ªânh √¢m l∆∞·ª£ng t·ª´ng ngu·ªìn.
    N·∫øu t·ªïng th·ªùi l∆∞·ª£ng video sau khi ch√®n audio v√† ph·∫ßn ƒëu√¥i ng·∫Øn h∆°n y√™u c·∫ßu, ph·∫ßn ƒëu√¥i video s·∫Ω ƒë∆∞·ª£c l·∫∑p l·∫°i ƒë·ªÉ ƒë·ªß th·ªùi l∆∞·ª£ng.
    N·∫øu d√†i h∆°n, video s·∫Ω b·ªã c·∫Øt ng·∫Øn l·∫°i.
    Args:
        video (VideoFileClip): ƒê·ªëi t∆∞·ª£ng video g·ªëc (moviepy).
        audio_path (str): ƒê∆∞·ªùng d·∫´n t·ªõi file audio ho·∫∑c video ch·ª©a audio c·∫ßn ch√®n.
        audio_insert_time (float): Th·ªùi ƒëi·ªÉm (t√≠nh b·∫±ng gi√¢y) b·∫Øt ƒë·∫ßu ch√®n audio v√†o video.
        video_tail_duration (float): Th·ªùi l∆∞·ª£ng ph·∫ßn ƒëu√¥i video sau khi audio k·∫øt th√∫c (t√≠nh b·∫±ng gi√¢y).
        video_audio_gain (float, optional): H·ªá s·ªë ƒëi·ªÅu ch·ªânh √¢m l∆∞·ª£ng audio g·ªëc c·ªßa video. M·∫∑c ƒë·ªãnh l√† 1.0.
        audio_insert_volume (float, optional): H·ªá s·ªë ƒëi·ªÅu ch·ªânh √¢m l∆∞·ª£ng audio ch√®n v√†o. M·∫∑c ƒë·ªãnh l√† 1.0.
    Returns:
        VideoFileClip: ƒê·ªëi t∆∞·ª£ng video m·ªõi ƒë√£ ƒë∆∞·ª£c ch√®n v√† tr·ªôn audio.
    Raises:
        ValueError: N·∫øu file video/audio ch√®n v√†o kh√¥ng c√≥ √¢m thanh.
    Ghi ch√∫:
        - H·ªó tr·ª£ c·∫£ file audio (.mp3, .wav, ...) v√† video c√≥ audio.
        - √Çm thanh m·ªõi s·∫Ω ƒë∆∞·ª£c tr·ªôn (mix) v·ªõi √¢m thanh g·ªëc c·ªßa video.
        - C√≥ th·ªÉ ƒëi·ªÅu ch·ªânh √¢m l∆∞·ª£ng t·ª´ng ngu·ªìn √¢m thanh ri√™ng bi·ªát.
    """
    video_duration = video.duration

    # ƒê·ªçc audio (h·ªó tr·ª£ c·∫£ .mp3 v√† video c√≥ audio)
    try:
        audio = AudioFileClip(audio_path)
    except:
        audio_video = VideoFileClip(audio_path)
        if not audio_video.audio:
            raise ValueError("File video ch√®n kh√¥ng c√≥ √¢m thanh.")
        audio = audio_video.audio

    total_needed_duration = audio_insert_time + audio.duration + video_tail_duration

    # N·∫øu video qu√° ng·∫Øn ‚Üí l·∫∑p ph·∫ßn ƒëu√¥i video
    if total_needed_duration > video_duration:
        video = repeat_video_tail(video, total_needed_duration, 3)
    elif total_needed_duration < video_duration:
        video = video.subclip(0, total_needed_duration)

    # Tr·ªôn √¢m thanh: audio c≈© + audio m·ªõi, c√≥ ch·ªânh √¢m l∆∞·ª£ng
    base_audio = video.audio.volumex(video_audio_gain) if video.audio else None
    new_audio = audio.volumex(audio_insert_volume).set_start(audio_insert_time)
    mixed_audio = CompositeAudioClip(
        [base_audio, new_audio] if base_audio else [new_audio]
    )

    return video.set_audio(mixed_audio)


def combine_audio_overlay_all_pairs(video_folder, audio_folder, output_folder):
    """
    K·∫øt h·ª£p t·ª´ng file audio v·ªõi t·ª´ng file video trong hai th∆∞ m·ª•c, xu·∫•t ra t·∫•t c·∫£ c√°c c·∫∑p video-audio c√≥ th·ªÉ.
    Args:
        video_folder (str): ƒê∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c ch·ª©a c√°c file video (.mp4).
        audio_folder (str): ƒê∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c ch·ª©a c√°c file audio (.mp3, .mp4).
        output_folder (str): ƒê∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c xu·∫•t c√°c file video ƒë√£ gh√©p audio.
    Ch·ª©c nƒÉng:
        - Duy·ªát qua t·∫•t c·∫£ c√°c file video v√† audio, gh√©p t·ª´ng audio v√†o t·ª´ng video.
        - Chu·∫©n h√≥a ƒë·ªô ph√¢n gi·∫£i v√† fps c·ªßa video theo video g·ªëc.
        - ƒê·∫£m b·∫£o video ƒë·ªß d√†i ƒë·ªÉ gh√©p audio.
        - Xu·∫•t file video m·ªõi v·ªõi t√™n d·∫°ng <t√™n_video>_<t√™n_audio>.mp4 v√†o output_folder.
        - In ra th√¥ng b√°o ti·∫øn tr√¨nh v√† l·ªói (n·∫øu c√≥).
    V√≠ d·ª•:
        combine_audio_overlay_all_pairs("videos", "audios", "output")
    """
    os.makedirs(output_folder, exist_ok=True)

    video_files = [f for f in os.listdir(video_folder) if f.endswith(".mp4")]
    audio_files = [f for f in os.listdir(audio_folder) if f.endswith((".mp3", ".mp4"))]

    print("üìÇ Danh s√°ch video:", video_files)
    print("üéµ Danh s√°ch audio:", audio_files)

    for video_file in video_files:
        video_path = os.path.join(video_folder, video_file)

        ref_clip = VideoFileClip(video_path)
        resolution = ref_clip.size
        fps = ref_clip.fps
        ref_clip.close()

        for audio_file in audio_files:
            audio_path = os.path.join(audio_folder, audio_file)

            try:
                print(f"‚ñ∂Ô∏è X·ª≠ l√Ω video: {video_file} + audio: {audio_file}")

                # Chu·∫©n h√≥a video
                video_clip = standardize_clip(
                    VideoFileClip(video_path), resolution, fps
                )

                # ƒê·∫£m b·∫£o c√≥ ƒë·ªß ƒë·ªô d√†i ƒë·ªÉ gh√©p audio
                video_with_audio = insert_audio_clip_mix(
                    video_clip, audio_path, 0, 3, 0.4
                )

                # ƒê·∫∑t t√™n theo d·∫°ng video_audio
                video_name, _ = os.path.splitext(video_file)
                audio_name, _ = os.path.splitext(audio_file)
                name = f"{audio_name}_{video_name}"
                output_path = os.path.join(output_folder, f"{name}.mp4")

                save_clip(video_with_audio, output_path)
                print(f"‚úÖ ƒê√£ xu·∫•t: {output_path}")

            except Exception as e:
                print(f"‚ùå L·ªói v·ªõi {video_file} + {audio_file}: {e}")


if __name__ == "__main__":
    print("‚ñ∂Ô∏è Script b·∫Øt ƒë·∫ßu...")

    video_folder = r"C:\Users\PC\Desktop\Processing"
    audio_folder = r"C:\Users\PC\Desktop\Processing\New folder"
    output_folder = r"C:\Users\PC\Desktop\Processing\Output"
    combine_audio_overlay_all_pairs(video_folder, audio_folder, output_folder)
